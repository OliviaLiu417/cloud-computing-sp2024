# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "spox/ubuntu-arm"
  config.vm.box_version = "1.0.0"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #

  # Provider-Specific Configuration (e.g., VirtualBox, VMware)
  config.vm.provider "vmware" do |vmware|
    vmware.gui = true  # Enable GUI mode for VMware
  end

  # Provisioning Configuration
  # Shell Provisioner - Executes a shell script on the guest machine
  config.vm.provision "shell", path: "bootstrap.sh"

   # File provisioner to copy the clouds.yaml file
  #  config.vm.provision "file", source: "clouds.yaml", destination: "/home/vagrant/.config/openstack/clouds.yaml"

  # File Provisioner - Copies files from the host to the guest
  config.vm.provision "file", source: "~/.ssh/cloud.pem", destination: "/home/vagrant/.ssh/cloud.pem"
  config.vm.provision "file", source: ".ansible.cfg", destination: "~/.ansible.cfg"
  config.vm.provision "file", source: "MyInventory", destination: "~/.ansible/MyInventory"

  config.vm.provision "ansible_local" do |ansible|
    ansible.playbook = "playbook_demo_master.yml"
    ansible.verbose = true  # Enable verbose mode for more detailed output
    ansible.install = true  # Ensure Ansible is installed on the guest machine
    ansible.limit = "all"  # Limit the playbook execution to all hosts in the inventory
    ansible.inventory_path = "MyInventory"  # Specify the inventory file path
  end
end
